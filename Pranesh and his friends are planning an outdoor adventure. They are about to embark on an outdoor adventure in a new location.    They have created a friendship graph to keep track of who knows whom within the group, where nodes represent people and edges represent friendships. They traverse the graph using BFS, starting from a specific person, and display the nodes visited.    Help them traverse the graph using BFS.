// You are using GCC
#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

struct Queue {
    int items[MAX_NODES];
    int front, rear;
};

void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}

int isEmpty(struct Queue *q) {
    return q->front == -1;
}

void enqueue(struct Queue *q, int value) {
    if (q->rear == MAX_NODES - 1) {
        printf("Queue is full\n");
    } else {
        if (q->front == -1) {
            q->front = 0;
        }
        q->rear++;
        q->items[q->rear] = value;
    }
}

int dequeue(struct Queue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        item = -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}

void BFS(int graph[MAX_NODES][MAX_NODES], int numNodes, int startNode) {
    //Type your code here
    int visited[MAX_NODES] = {0};
    struct Queue q;
    initQueue(&q);

    visited[startNode] = 1;
    enqueue(&q, startNode);

    while (!isEmpty(&q)) {
        int currentNode = dequeue(&q);
        printf("Visited Node: %d\n", currentNode);

        for (int neighbor = 0; neighbor < numNodes; neighbor++) {
            if (graph[currentNode][neighbor] == 1 && !visited[neighbor]) {
                visited[neighbor] = 1;
                enqueue(&q, neighbor);
            }
        }
    }
}

int main() {
    int numNodes, numEdges;

    scanf("%d %d", &numNodes, &numEdges);

    int graph[MAX_NODES][MAX_NODES] = {0};

    for (int i = 0; i < numEdges; i++) {
        int person1, person2;
        scanf("%d %d", &person1, &person2);

        graph[person1][person2] = 1;
        graph[person2][person1] = 1;
    }

    int startNode;
    scanf("%d", &startNode);

    BFS(graph, numNodes, startNode);

    return 0;
}
