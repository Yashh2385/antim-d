#include <stdio.h>
#include <stdlib.h>

#define MAX_QUEUE_SIZE 100

typedef struct {
    int data[MAX_QUEUE_SIZE];
    int front;
    int rear;
    int size;
} Queue;

void initializeQueue(Queue *queue) {
    queue->front = 0;
    queue->rear = -1;
    queue->size = 0;
}

int isFull(Queue *queue) {
    return queue->size == MAX_QUEUE_SIZE;
}

int isEmpty(Queue *queue) {
    return queue->size == 0;
}

void enqueue(Queue *queue, int value) {
    if (!isFull(queue)) {
        queue->rear = (queue->rear + 1) % MAX_QUEUE_SIZE;
        queue->data[queue->rear] = value;
        queue->size++;
    }
}

int magicalSum(Queue *queue, int N) {
    // Type your code here
    int sum = 0;

    if (N >= 0 && N < queue->size) {
        for (int i = 0; i <= N; ++i) {
            int index = (queue->front + i) % MAX_QUEUE_SIZE;
            sum += queue->data[index];
        }
    }

    return sum;
}

int main() {
    Queue queue;
    initializeQueue(&queue);

    int length;
    scanf("%d", &length);

    for (int i = 0; i < length; ++i) {
        int value;
        scanf("%d", &value);
        enqueue(&queue, value);
    }

    int N;
    scanf("%d", &N);

    int result = magicalSum(&queue, N);
    printf("%d\n", result);

    return 0;
}
